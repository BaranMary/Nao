<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="141.421">
            <Box name="Unlearn All Faces" id="3" localization="8" tooltip="Remove all faces from the face database.&#x0A;&#x0A;V1.1.0&#x0A;" x="140" y="257">
              <bitmap>media/images/box/interaction/unlearn_all_faces.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try :
            self.faceDetectionModule = self.session().service( "ALFaceDetection" )
        except Exception as e:
            self.faceDetectionModule = None
            self.logger.error(e)
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onClearDB(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        if self.faceDetectionModule:
            if( self.faceDetectionModule.clearDatabase() ):
                self.onSuccess()
            else:
                self.onFailure()
        self.bIsRunning = False]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onClearDB" type="1" type_size="1" nature="2" inner="0" tooltip="Remove all faces from the database.&#x0A;&#x0A;!!Warning!! If the operation success, the robot will not be able to recognize the faces you&#x0A;have already taught him." id="2" />
              <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the clearing succeeded." id="3" />
              <Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the clearing failed." id="4" />
            </Box>
            <Box name="start learning face" id="5" localization="8" tooltip="start learning face box" x="308" y="322">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
              <Input name="input_name" type="3" type_size="1" nature="2" inner="0" tooltip="user name" id="3" />
              <Output name="success" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
              <Output name="failed" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Learn Face" id="1" localization="8" tooltip="Teach the robot a new face to recognize. the robot&apos;s eyes will become green in case of&#x0A;success and red in case of failure.&#x0A;&#x0A;V1.1.0&#x0A;" x="362" y="68">
                        <bitmap>media/images/box/interaction/learn_face.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to learn.&#x0A;&#x0A;After entering the name of the face, you have 5s to place in front of the robot&apos;s face.&#x0A;Then the learning process is launched and the robot&apos;s eyes get blue. After some&#x0A;seconds, his eyes should turn green (success) or red (failure).&#x0A;&#x0A;Note: You can learn several times the same face on different days and/or&#x0A;conditions to robustify the recognition process." id="2" />
                        <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the learning succeeded." id="3" />
                        <Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the learning failed." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Learn Face" id="2" localization="8" tooltip="Learn a face to recognize it later.&#x0A;&#x0A;Note: You need to be just in front of the robot&apos;s face to teach him your face." x="606" y="78">
                                  <bitmap>media/images/box/interaction/face.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)


    def onLoad(self):
        try:
            self.faceDetectionModule = self.session().service("ALFaceDetection")
        except Exception as e:
            self.faceDetectionModule = None
            self.logger.error(e)
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onLearn(self, p):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        if( self.faceDetectionModule and self.faceDetectionModule.learnFace( p ) ):
            self.onSuccess()
        else:
            self.onFailure()
        self.bIsRunning = False

    def onInput_onReLearn(self, p):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        if( self.faceDetectionModule and self.faceDetectionModule.reLearnFace( p ) ):
            self.onSuccess()
        else:
            self.onFailure()
        self.bIsRunning = False]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to learn." id="2" />
                                  <Input name="onReLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to relearn. Stimulating this input enables to use in a&#x0A;new learning process the latest images where a face has been wrongly&#x0A;recognized." id="3" />
                                  <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the operation succeeded. The face has been learnt." id="4" />
                                  <Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the operation failed. The face has not been learnt." id="5" />
                                </Box>
                                <Box name="WaitToSendMsg" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before sending the message." x="450" y="63">
                                  <bitmap>media/images/box/box-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok1 = None
        self.ok2 = False

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onMessage(self, p):
        if( not self.ok2 ):
            self.ok1 = p
        else:
            self.ok( p )

    def onInput_onSignal(self):
        if( self.ok1 == None ):
            self.ok2 = True
        else:
            self.ok( self.ok1 )

    def ok(self, p):
        self.ok1 = None
        self.ok2 = False
        self.onStopped( p )]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onMessage" type="0" type_size="1" nature="2" inner="0" tooltip="First signal to wait. This signal contains the message to transmit." id="2" />
                                  <Input name="onSignal" type="1" type_size="1" nature="2" inner="0" tooltip="Second signal to wait." id="3" />
                                  <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Message sent when both inputs are stimulated." id="4" />
                                </Box>
                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is." x="75" y="60">
                                  <bitmap>media/images/box/box-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self, p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                  <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                </Box>
                                <Box name="Eyes LEDs" id="5" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="768" y="30">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#00ff00</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Eyes LEDs" id="6" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="771" y="166">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#ff0000</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Eyes LEDs" id="1" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="396" y="246">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 170, 255])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#00aaff</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Wait" id="3" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="212" y="120">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="3" outputowner="5" indexofoutput="3" />
                                <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="3" />
                                <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="8" indexofinput="3" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="learn successed" id="3" localization="8" tooltip="Say some text. The text can be localized." x="593" y="44">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I took a nice photo!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="learn failed" id="5" localization="8" tooltip="Say some text. The text can be localized." x="613" y="199">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I can&apos;t take the photo, please watch my face or brighter the light" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="181" y="215">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I&apos;m taking a photo of you, smile!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="setUserID" id="4" localization="8" tooltip="setUserID" x="175" y="69">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.ALDialog = self.session().service('ALDialog')
        self.ALMemory = self.session().service('ALMemory')
        self.ALUserSession = self.session().service('ALUserSession')
        self.ALKnowledge = self.session().service('ALKnowledge')
        self.ALTextToSpeech = self.session().service('ALTextToSpeech')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped(p) #activate the output of the box
        self.user_name = p
        int_userID = self.ALUserSession.getFocusedUser()
        str_userID = str(int_userID)
        self.ALKnowledge.add("com.aldebaran.learning",str_userID,"name",self.user_name)
#        self.ALTextToSpeech.say(str_userID)
        self.ALMemory.insertData("user_id",str_userID)
        self.onStopped(str_userID)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" />
                      <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="check face database" id="1" localization="8" tooltip="Enter description here" x="441" y="59">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
              <Output name="unknowyou" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
              <Output name="output_name" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="84.0896">
                      <Box name="Face Reco." id="2" localization="8" tooltip="Detect people&apos;s face and recognize those which are known by the robot.&#x0A;&#x0A;Note: the robot needs to learn a face with the Learn Face box before he can recognize it." x="294" y="130">
                        <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="FaceDetected" type="0" type_size="1" nature="4" stm_value_name="FaceDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                        <Output name="onRecognizedFaces" type="3" type_size="1" nature="2" inner="0" tooltip="Names of recognized faces. If several faces are recognized, they are sent one&#x0A;after an other on this output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Reco. Det. Faces" id="1" localization="8" tooltip="Process face detection extractor data (FaceDetected) to extract the labels of&#x0A;recognized faces and notify when there is a face detected but not recognized.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the number of&#x0A;recognized faces change." x="183" y="68">
                                  <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.timeFilteredResult = [];

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(len(p) > 0):
            if(len(p[1]) > 0): # just in case of the ALValue is in the wrong format
                # get the ALValue returned by the time filtered recognition:
                #    - [] when nothing new.
                #    - [4] when a face has been detected but not recognized during the first 8s.
                #    - [2, [faceName]] when one face has been recognized.
                #    - [3, [faceName1, faceName2, ...]] when several faces have been recognized.
                self.timeFilteredResult = p[1][len(p[1]) -1]
                if( len(self.timeFilteredResult) == 1 ):
                    # If a face has been detected for more than 8s but not recognized
                    if(self.timeFilteredResult[0] == 4):
                        self.onDetectWithoutReco()
                elif( len(self.timeFilteredResult) == 2 ):
                    # If one or several faces have been recognized
                    if(self.timeFilteredResult[0] in [2, 3]):
                        for s in self.timeFilteredResult[1]:
                            self.onRecognizedFace( s )

    def onInput_onStop(self):
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;FaceDetected extractor data." id="2" />
                                  <Output name="onRecognizedFace" type="3" type_size="1" nature="1" inner="0" tooltip="Name of recognized face. If several faces are recognized, they are sent one after an&#x0A;other on this output.&#x0A;&#x0A;Note: if it is the wrong face which has been recognized, you have 7s to rename&#x0A;it with the relearn function available on one of  Add/Del Faces sub-boxes (Learn Face&#x0A;box)." id="3" />
                                  <Output name="onDetectWithoutReco" type="1" type_size="1" nature="1" inner="0" tooltip="A face has been detected for more than 8s but has not been recognized. It means&#x0A;that the robot does not know this face but it would be a good idea to learn it." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Say" id="1" localization="8" tooltip="Say some text. The text can be localized." x="458" y="35">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Oh, seems I didn&apos;t sleep well last night. I can&apos;t remember your name now." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="startFaceRecog" id="4" localization="8" tooltip="startFaceRecog" x="274" y="70">
              <dialogFile>../startFaceRecog/startFaceRecog.dlg</dialogFile>
              <bitmap>media/images/box/box-dialog.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="faceRecog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="output_name" type="3" type_size="1" nature="2" inner="0" tooltip="user name" id="6" />
              <Output name="delete_database" type="1" type_size="1" nature="2" inner="0" tooltip="delete_database" id="7" />
              <Output name="indoorYoga" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
            </Box>
            <Box name="changeCI" id="6" localization="8" tooltip="changeCI" x="104" y="72">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        ALProxy('ALDialog').setConfidenceThreshold("BNF", 0.48)
        ALProxy('ALDialog').setConfidenceThreshold("SLM", 0.48)
        ALProxy('ALDialog').setConfidenceThreshold("REMOTE", 0.48)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="back_topic" id="8" localization="8" tooltip="after face recog, going back to dialog" x="611" y="90">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.name = None

    def onLoad(self):
        #put initialization code here
        self.ALDialog = self.session().service('ALDialog')
        self.ALMemory = self.session().service('ALMemory')
        self.ALUserSession = self.session().service('ALUserSession')
        self.ALKnowledge = self.session().service('ALKnowledge')
        self.ALTextToSpeech = self.session().service('ALTextToSpeech')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart_notknow(self):
        self.ALDialog.gotoTag("ask_name","startFaceRecog")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_input_name(self, p):
        self.userID = str(p)
        self.ALMemory.insertData("user_id",self.userID)

        user_name_vec = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,"name")
        self.ALMemory.insertData("user_name",user_name_vec[0])
        outdoor_act = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,"outdoor")
#        self.ALTextToSpeech.say(str(outdoor_act))
        indoor_act = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,"indoor")
#        self.ALTextToSpeech.say(str(self.ALMemory.getData("outdoor")))
        if len(outdoor_act)!=0:
            self.ALMemory.insertData("outdoor",outdoor_act[-1])
#        self.ALTextToSpeech.say(str(self.ALMemory.getData("outdoor")))

        if len(indoor_act)!=0:
            self.ALMemory.insertData("indoor",indoor_act[-1])
        for item in outdoor_act:
            temp = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,item)
            if len(temp)!=0:
                self.ALMemory.insertData("who_play_with",temp[-1])
        for item2 in indoor_act:
            temp2 = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,item2)
            if len(temp2)!=0:
                self.ALMemory.insertData("who_play_with",temp2[-1])
        num_instru = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,"num_instruments")
        self.ALMemory.insertData("num_instruments",num_instru)
        exer_year = self.ALKnowledge.getObject("com.aldebaran.learning",self.userID,"exercise_years")
        self.ALMemory.insertData("exercise_years",exer_year)
#        self.ALTextToSpeech.say(str(outdoor_act))
#        self.ALTextToSpeech.say(str(indoor_act))
#        self.ALTextToSpeech.say(str(num_instru))
#        self.ALTextToSpeech.say(str(exer_year))
#        self.ALTextToSpeech.say(self.ALMemory.getData("who_play_with"))
        what_my_name = self.ALMemory.getData("what_my_name")
        if (what_my_name):
            self.ALMemory.insertData("what_my_name",False)
            self.ALDialog.gotoTag("your_name_is","startFaceRecog")
        else:
            self.ALDialog.gotoTag("back_from_learn_or_recog","startFaceRecog")]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
              <Input name="input_name" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
              <Input name="onStart_notknow" type="1" type_size="1" nature="2" inner="0" tooltip="not know you" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
            </Box>
            <Box name="back_topic2" id="9" localization="8" tooltip="back_topic2" x="547" y="328">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.ALDialog = self.session().service('ALDialog')


    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.ALDialog.gotoTag("back_from_learn_or_recog","startFaceRecog")


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Tai Chi Chuan" id="2" localization="8" tooltip="Arms part of Tai Chi Chuan dance." x="427" y="214">
              <bitmap>media/images/box/movement/dance.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="5" start_frame="1" end_frame="-1" size="250">
                <BehaviorLayer name="LED">
                  <BehaviorKeyframe name="keyframe15" index="15">
                    <Diagram>
                      <Box name="Light_ConcentratedEyes" id="1" localization="8" tooltip="Set an animated gaze which expresses concentration." x="231" y="105">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    try: # disable autoBind;
      GeneratedClass.__init__(self, False);
    except TypeError: # if NAOqi < 1.14;
      GeneratedClass.__init__( self );

  def onLoad(self):
    self.bIsRunning = False;
    self.leds = self.session().service("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 1.0;
    self.leds.fadeRGB( "FaceLedsTop", 0x0000ff, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsBottom", 0x0000ff, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsExternal", 0x0000ff, rDuration );

    while( not self.bMustStop ):
      rTime=1.0
      self.leds.fadeRGB( "FaceLedsInternal", 0x000000, rTime );
      if( self.bMustStop ):
        break;
      self.leds.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Tocolor" id="2" localization="8" tooltip="tags:&#x0A;LED" x="490" y="183">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        self.leds.reset("EarLeds")
        pass

    def onInput_onStart(self):
        rDuration = 0.2
        self.leds.fadeRGB( "BrainLeds", 0xffffff, rDuration)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Resource name="Left eye leds" type="Lock" timeout="1" />
                        <Resource name="Right eye leds" type="Lock" timeout="1" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                  <BehaviorKeyframe name="Eye48" index="247">
                    <Diagram>
                      <Box name="Blink" id="3" localization="8" tooltip="tags:&#x0A;LED" x="339" y="161">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True  );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True  );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True  );
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True  );
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True  );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Resource name="Left eye leds" type="Lock" timeout="1" />
                        <Resource name="Right eye leds" type="Lock" timeout="1" />
                      </Box>
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <BehaviorLayer name="music">
                  <BehaviorKeyframe name="keyframe12" index="12">
                    <Diagram>
                      <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="193" y="90">
                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/sounds/mikhael-landscape-paisaje.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                        <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                        <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                        <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                  <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                  <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                  <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                </Box>
                                <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                  <bitmap>media/images/box/folder.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                  <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Audio player" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="4.82967e-06" />
                    <Key frame="35" value="4.82968e-06" />
                    <Key frame="45" value="4.82968e-06" />
                    <Key frame="55" value="-2.73208e-05" />
                    <Key frame="65" value="18" />
                    <Key frame="75" value="-17" />
                    <Key frame="85" value="-68" />
                    <Key frame="95" value="-16" />
                    <Key frame="105" value="12" />
                    <Key frame="118" value="90" />
                    <Key frame="131" value="12" />
                    <Key frame="142" value="8" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="-8" />
                    <Key frame="172" value="16" />
                    <Key frame="185" value="-12" />
                    <Key frame="198" value="-90" />
                    <Key frame="211" value="-12" />
                    <Key frame="222" value="-8" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="0" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="5.12931e-06" />
                    <Key frame="35" value="-2.73208e-05" />
                    <Key frame="45" value="5.0962e-06" />
                    <Key frame="55" value="6.01466e-06" />
                    <Key frame="65" value="19" />
                    <Key frame="75" value="18" />
                    <Key frame="85" value="5.26559e-06" />
                    <Key frame="95" value="-19" />
                    <Key frame="105" value="8" />
                    <Key frame="118" value="-5" />
                    <Key frame="131" value="8" />
                    <Key frame="142" value="22" />
                    <Key frame="152" value="32" />
                    <Key frame="162" value="22" />
                    <Key frame="172" value="-19" />
                    <Key frame="185" value="8" />
                    <Key frame="198" value="-5" />
                    <Key frame="211" value="8" />
                    <Key frame="222" value="22" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="-10.0411" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="15" value="90" />
                    <Key frame="25" value="110" />
                    <Key frame="35" value="120" />
                    <Key frame="45" value="90" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="21" />
                    <Key frame="75" value="20" />
                    <Key frame="85" value="11" />
                    <Key frame="95" value="-46" />
                    <Key frame="105" value="-10" />
                    <Key frame="118" value="-17" />
                    <Key frame="131" value="-10" />
                    <Key frame="142" value="30" />
                    <Key frame="152" value="27" />
                    <Key frame="162" value="19" />
                    <Key frame="172" value="-27" />
                    <Key frame="185" value="4" />
                    <Key frame="198" value="-4" />
                    <Key frame="211" value="4" />
                    <Key frame="222" value="19" />
                    <Key frame="231" value="97" />
                    <Key frame="250" value="83.0164" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="15" value="10" />
                    <Key frame="25" value="20" />
                    <Key frame="35" value="10" />
                    <Key frame="45" value="10" />
                    <Key frame="55" value="10" />
                    <Key frame="65" value="40" />
                    <Key frame="75" value="0" />
                    <Key frame="85" value="5" />
                    <Key frame="95" value="10" />
                    <Key frame="105" value="23" />
                    <Key frame="118" value="66" />
                    <Key frame="131" value="23" />
                    <Key frame="142" value="23" />
                    <Key frame="152" value="10" />
                    <Key frame="162" value="0" />
                    <Key frame="172" value="23" />
                    <Key frame="185" value="0" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="0" />
                    <Key frame="222" value="12" />
                    <Key frame="231" value="54" />
                    <Key frame="250" value="12.7723" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="15" value="-90" />
                    <Key frame="25" value="-90" />
                    <Key frame="35" value="-90" />
                    <Key frame="45" value="-90" />
                    <Key frame="55" value="-90" />
                    <Key frame="65" value="-22" />
                    <Key frame="75" value="0" />
                    <Key frame="85" value="0" />
                    <Key frame="95" value="0" />
                    <Key frame="105" value="0" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="0" />
                    <Key frame="142" value="0" />
                    <Key frame="152" value="12" />
                    <Key frame="162" value="11" />
                    <Key frame="172" value="-24" />
                    <Key frame="185" value="-24" />
                    <Key frame="198" value="-5" />
                    <Key frame="211" value="-24" />
                    <Key frame="222" value="11" />
                    <Key frame="227" value="-21.7" />
                    <Key frame="231" value="-14" />
                    <Key frame="250" value="-68.8135" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="-40" />
                    <Key frame="35" value="-60" />
                    <Key frame="45" value="0" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="-95" />
                    <Key frame="75" value="-55" />
                    <Key frame="85" value="-85" />
                    <Key frame="95" value="-58" />
                    <Key frame="105" value="-58" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="-58" />
                    <Key frame="142" value="-58" />
                    <Key frame="152" value="-51" />
                    <Key frame="162" value="-49" />
                    <Key frame="172" value="-64" />
                    <Key frame="185" value="-49" />
                    <Key frame="198" value="-72" />
                    <Key frame="211" value="-49" />
                    <Key frame="222" value="-49" />
                    <Key frame="227" value="-57" />
                    <Key frame="231" value="-81.4" />
                    <Key frame="250" value="-23.6757" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="15" value="-88" />
                    <Key frame="250" value="5.78932" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="15" value="0" />
                    <Key frame="250" value="0.291787" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="15" value="90" />
                    <Key frame="25" value="110" />
                    <Key frame="35" value="120" />
                    <Key frame="45" value="90" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="10" />
                    <Key frame="75" value="35" />
                    <Key frame="85" value="60" />
                    <Key frame="95" value="-27" />
                    <Key frame="105" value="4" />
                    <Key frame="118" value="-4" />
                    <Key frame="131" value="4" />
                    <Key frame="142" value="19" />
                    <Key frame="152" value="27" />
                    <Key frame="162" value="30" />
                    <Key frame="172" value="-46" />
                    <Key frame="185" value="-10" />
                    <Key frame="198" value="-17" />
                    <Key frame="211" value="-10" />
                    <Key frame="222" value="30" />
                    <Key frame="231" value="97" />
                    <Key frame="250" value="82.7438" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="15" value="-10" />
                    <Key frame="25" value="-10" />
                    <Key frame="35" value="-20" />
                    <Key frame="45" value="-10" />
                    <Key frame="55" value="-9.99896" />
                    <Key frame="65" value="-4" />
                    <Key frame="75" value="-48" />
                    <Key frame="85" value="-87" />
                    <Key frame="95" value="-23" />
                    <Key frame="105" value="0" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="0" />
                    <Key frame="142" value="0" />
                    <Key frame="152" value="-10" />
                    <Key frame="162" value="-23" />
                    <Key frame="172" value="-10" />
                    <Key frame="185" value="-23" />
                    <Key frame="198" value="-66" />
                    <Key frame="211" value="-23" />
                    <Key frame="222" value="-32" />
                    <Key frame="231" value="-54" />
                    <Key frame="250" value="-12.6315" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="15" value="90" />
                    <Key frame="25" value="90" />
                    <Key frame="35" value="90" />
                    <Key frame="45" value="90" />
                    <Key frame="55" value="90" />
                    <Key frame="65" value="11" />
                    <Key frame="75" value="20" />
                    <Key frame="85" value="90" />
                    <Key frame="95" value="24" />
                    <Key frame="105" value="24" />
                    <Key frame="118" value="5" />
                    <Key frame="131" value="24" />
                    <Key frame="142" value="-11" />
                    <Key frame="152" value="-12" />
                    <Key frame="162" value="0" />
                    <Key frame="172" value="0" />
                    <Key frame="185" value="0" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="0" />
                    <Key frame="222" value="0" />
                    <Key frame="227" value="19.6" />
                    <Key frame="231" value="14" />
                    <Key frame="250" value="68.8565" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="40" />
                    <Key frame="35" value="60" />
                    <Key frame="45" value="1.47493e-05" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="71" />
                    <Key frame="75" value="94" />
                    <Key frame="85" value="4" />
                    <Key frame="95" value="64" />
                    <Key frame="105" value="49" />
                    <Key frame="118" value="72" />
                    <Key frame="131" value="49" />
                    <Key frame="142" value="49" />
                    <Key frame="152" value="51" />
                    <Key frame="162" value="58" />
                    <Key frame="172" value="58" />
                    <Key frame="185" value="58" />
                    <Key frame="198" value="2" />
                    <Key frame="211" value="58" />
                    <Key frame="222" value="58" />
                    <Key frame="227" value="64.9" />
                    <Key frame="231" value="78.3" />
                    <Key frame="250" value="23.387" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="15" value="88" />
                    <Key frame="250" value="6.23278" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="15" value="0" />
                    <Key frame="250" value="0.301984" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="15" value="-6.2" />
                    <Key frame="25" value="-6.9" />
                    <Key frame="35" value="-6.94104" />
                    <Key frame="45" value="-7.04938" />
                    <Key frame="55" value="-8.2" />
                    <Key frame="65" value="-9.6" />
                    <Key frame="75" value="-5.7" />
                    <Key frame="85" value="0" />
                    <Key frame="95" value="0" />
                    <Key frame="105" value="0" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="0" />
                    <Key frame="142" value="-0.566539" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="0" />
                    <Key frame="172" value="0" />
                    <Key frame="185" value="0" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="0" />
                    <Key frame="222" value="-3.9" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="-9.74084" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="15" value="-3" />
                    <Key frame="25" value="-7" />
                    <Key frame="35" value="-11.4235" />
                    <Key frame="45" value="5.96288" />
                    <Key frame="55" value="6" />
                    <Key frame="65" value="-10" />
                    <Key frame="75" value="10" />
                    <Key frame="85" value="24.1" />
                    <Key frame="95" value="30.3" />
                    <Key frame="105" value="28.7" />
                    <Key frame="118" value="32.4" />
                    <Key frame="131" value="28.7" />
                    <Key frame="142" value="19.9829" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="-15" />
                    <Key frame="167" value="14.4" />
                    <Key frame="172" value="15" />
                    <Key frame="185" value="8" />
                    <Key frame="198" value="40" />
                    <Key frame="211" value="8" />
                    <Key frame="222" value="-15" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="6.82441" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="-19.8395" />
                    <Key frame="45" value="-0.0382666" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="-40" />
                    <Key frame="75" value="-35" />
                    <Key frame="85" value="-60" />
                    <Key frame="95" value="-60" />
                    <Key frame="105" value="-60" />
                    <Key frame="118" value="-60" />
                    <Key frame="131" value="-60" />
                    <Key frame="142" value="-59.6787" />
                    <Key frame="152" value="-50" />
                    <Key frame="162" value="-42.5" />
                    <Key frame="172" value="-7" />
                    <Key frame="185" value="-50" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="-50" />
                    <Key frame="222" value="-37.5" />
                    <Key frame="231" value="-60" />
                    <Key frame="250" value="7.30057" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="42.8009" />
                    <Key frame="45" value="0.0951225" />
                    <Key frame="55" value="-5.69182e-06" />
                    <Key frame="65" value="80" />
                    <Key frame="75" value="70" />
                    <Key frame="85" value="120" />
                    <Key frame="95" value="120" />
                    <Key frame="105" value="120" />
                    <Key frame="118" value="120" />
                    <Key frame="131" value="120" />
                    <Key frame="142" value="120.887" />
                    <Key frame="152" value="100" />
                    <Key frame="162" value="85" />
                    <Key frame="172" value="7" />
                    <Key frame="185" value="100" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="100" />
                    <Key frame="222" value="75" />
                    <Key frame="231" value="120" />
                    <Key frame="250" value="-5.09006" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="15" value="5.75265e-06" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="-22.1511" />
                    <Key frame="45" value="-0.569877" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="-37.1" />
                    <Key frame="75" value="-35" />
                    <Key frame="85" value="-60" />
                    <Key frame="95" value="-60" />
                    <Key frame="105" value="-60" />
                    <Key frame="118" value="-60" />
                    <Key frame="131" value="-60" />
                    <Key frame="142" value="-59.6787" />
                    <Key frame="152" value="-50" />
                    <Key frame="162" value="-42.5" />
                    <Key frame="172" value="0" />
                    <Key frame="185" value="5.75265e-06" />
                    <Key frame="198" value="30" />
                    <Key frame="211" value="5.75265e-06" />
                    <Key frame="217" value="-31.8" />
                    <Key frame="222" value="-37.5" />
                    <Key frame="231" value="-60" />
                    <Key frame="250" value="5.00876" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="15" value="3" />
                    <Key frame="25" value="7" />
                    <Key frame="35" value="9.83048" />
                    <Key frame="45" value="-6.94104" />
                    <Key frame="55" value="-6" />
                    <Key frame="65" value="10" />
                    <Key frame="75" value="-15" />
                    <Key frame="85" value="3.6" />
                    <Key frame="95" value="4.2" />
                    <Key frame="105" value="0.5" />
                    <Key frame="118" value="1.8" />
                    <Key frame="131" value="0.5" />
                    <Key frame="142" value="6.97225" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="-13.8" />
                    <Key frame="167" value="-31.9" />
                    <Key frame="172" value="-24.3" />
                    <Key frame="185" value="-20" />
                    <Key frame="198" value="0" />
                    <Key frame="211" value="-20" />
                    <Key frame="222" value="-17.9" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="-6.34798" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="15" value="3" />
                    <Key frame="25" value="-7" />
                    <Key frame="35" value="-24.8982" />
                    <Key frame="45" value="-6.04821" />
                    <Key frame="55" value="-6" />
                    <Key frame="65" value="-20" />
                    <Key frame="75" value="-45" />
                    <Key frame="85" value="-31" />
                    <Key frame="95" value="-12.7" />
                    <Key frame="105" value="-25.6" />
                    <Key frame="118" value="-40" />
                    <Key frame="131" value="-25.6" />
                    <Key frame="142" value="15.2077" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="-20" />
                    <Key frame="172" value="-30.9" />
                    <Key frame="185" value="-29.3" />
                    <Key frame="198" value="-34.2" />
                    <Key frame="211" value="-35" />
                    <Key frame="222" value="-30.5" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="-6.82407" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="0.134711" />
                    <Key frame="45" value="0.21464" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="-40" />
                    <Key frame="75" value="-10" />
                    <Key frame="85" value="-6" />
                    <Key frame="95" value="-7" />
                    <Key frame="105" value="-50" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="-50" />
                    <Key frame="142" value="-45.3545" />
                    <Key frame="152" value="-50" />
                    <Key frame="162" value="-60" />
                    <Key frame="172" value="-60" />
                    <Key frame="185" value="-60" />
                    <Key frame="198" value="-60" />
                    <Key frame="211" value="-60" />
                    <Key frame="222" value="-60" />
                    <Key frame="231" value="-60" />
                    <Key frame="250" value="7.30058" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="15" value="0" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="0.178188" />
                    <Key frame="45" value="-0.410883" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="80" />
                    <Key frame="75" value="20" />
                    <Key frame="85" value="7" />
                    <Key frame="95" value="7" />
                    <Key frame="105" value="100" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="100" />
                    <Key frame="142" value="90.0035" />
                    <Key frame="152" value="100" />
                    <Key frame="162" value="120" />
                    <Key frame="172" value="120" />
                    <Key frame="185" value="120" />
                    <Key frame="198" value="120" />
                    <Key frame="211" value="120" />
                    <Key frame="222" value="120" />
                    <Key frame="231" value="120" />
                    <Key frame="250" value="-5.26102" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="15" value="5.75266e-06" />
                    <Key frame="25" value="0" />
                    <Key frame="35" value="0.266079" />
                    <Key frame="45" value="-0.349163" />
                    <Key frame="55" value="0" />
                    <Key frame="65" value="-40" />
                    <Key frame="75" value="-10" />
                    <Key frame="85" value="0" />
                    <Key frame="95" value="0" />
                    <Key frame="105" value="5.75266e-06" />
                    <Key frame="118" value="30" />
                    <Key frame="131" value="5.75266e-06" />
                    <Key frame="142" value="-45.8771" />
                    <Key frame="152" value="-50" />
                    <Key frame="162" value="-60" />
                    <Key frame="172" value="-60" />
                    <Key frame="185" value="-60" />
                    <Key frame="198" value="-60" />
                    <Key frame="211" value="-60" />
                    <Key frame="222" value="-60" />
                    <Key frame="231" value="-60" />
                    <Key frame="250" value="5.00876" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="15" value="-3" />
                    <Key frame="25" value="7.5" />
                    <Key frame="35" value="22.6325" />
                    <Key frame="45" value="6.68218" />
                    <Key frame="55" value="6" />
                    <Key frame="65" value="16.9" />
                    <Key frame="75" value="35.6" />
                    <Key frame="85" value="45" />
                    <Key frame="95" value="42.6" />
                    <Key frame="105" value="25" />
                    <Key frame="118" value="0" />
                    <Key frame="131" value="25" />
                    <Key frame="142" value="9.83317" />
                    <Key frame="152" value="0" />
                    <Key frame="162" value="-10" />
                    <Key frame="172" value="-2.41531" />
                    <Key frame="185" value="-3.18747" />
                    <Key frame="198" value="-0.718272" />
                    <Key frame="211" value="-0.558977" />
                    <Key frame="222" value="-1.55043" />
                    <Key frame="231" value="0" />
                    <Key frame="250" value="6.34774" />
                  </ActuatorCurve>
                  <ActuatorCurve name="RHipYawPitch (RHipYawPitch)" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="15" value="-6.2" />
                    <Key frame="25" value="-6.9" />
                    <Key frame="35" value="-7.55628" />
                    <Key frame="45" value="-7.04938" />
                    <Key frame="55" value="-8.2" />
                    <Key frame="65" value="-9.6" />
                    <Key frame="142" value="0.178188" />
                    <Key frame="250" value="-9.74084" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
            </Box>
            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="5" />
            <Link inputowner="8" indexofinput="3" outputowner="1" indexofoutput="4" />
            <Link inputowner="8" indexofinput="4" outputowner="1" indexofoutput="3" />
            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="6" />
            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="7" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="5" />
            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="8" />
            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
